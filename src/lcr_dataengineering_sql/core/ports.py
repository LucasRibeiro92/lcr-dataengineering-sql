from __future__ import annotations
from typing import Protocol, Mapping, Any, Iterator
import pandas as pd
from contextlib import AbstractContextManager

class Db(Protocol):
    # Execuções básicas
    def execute(self, sql: str, params: Mapping[str, Any] | None = None) -> int: ...
    def query_all(self, sql: str, params: Mapping[str, Any] | None = None) -> list[dict]: ...
    def query_iter(self, sql: str, params: Mapping[str, Any] | None = None) -> Iterator[dict]: ...

    # Schema / Tabela / View / Procedure
    def create_schema(self, schema: str, if_not_exists: bool = True) -> None: ...
    def truncate_table(self, schema: str, table: str) -> None: ...
    def drop_table(self, schema: str, table: str, if_exists: bool = True) -> None: ...
    def table_exists(self, schema: str, table: str) -> bool: ...
    def create_view(self, schema: str, view: str, select_sql: str, or_replace: bool = True) -> None: ...
    def drop_view(self, schema: str, view: str, if_exists: bool = True) -> None: ...
    def create_procedure(self, schema: str, proc: str, definition_sql: str, or_alter: bool = True) -> None: ...
    def exec_procedure(self, schema: str, proc: str, params: Mapping[str, Any] | None = None) -> list[dict]: ...

    # Criação/ingestão de dados
    def create_table_from_query(self, create_table_sql: str) -> None: ...
    def create_table_from_df(self, df: pd.DataFrame, schema: str, table: str,
                             pk: list[str] | None = None, if_not_exists: bool = True) -> bool: ...
    def insert_df(self, df: pd.DataFrame, schema: str, table: str, chunksize: int = 10000) -> int: ...
